# -*- coding: utf-8 -*-
"""
Created on Sun Jan 16 06:00:09 2020
@author: engoliveira

"""

# Este método interpola os dados apresentados no vetores x e y a partir de splines cubicos
# Também é possível calcular o valor da interpolação em um ponto usando a variável xp.

# Interpolação Spline Cubico

import numpy
import matplotlib.pyplot as pyplot

x = [1.0, 1.0101010101010102, 1.02020202020202, 1.0303030303030303, 1.0404040404040404, 1.0505050505050506, 1.0606060606060606, 1.0707070707070707, 1.0808080808080809, 1.0909090909090908, 1.101010101010101, 1.1111111111111112, 1.121212121212121, 1.1313131313131313, 1.1414141414141414, 1.1515151515151516, 1.1616161616161615, 1.1717171717171717, 1.1818181818181819, 1.191919191919192, 1.202020202020202, 1.2121212121212122, 1.2222222222222223, 1.2323232323232323, 1.2424242424242424, 1.2525252525252526, 1.2626262626262625, 1.2727272727272727, 1.2828282828282829, 1.2929292929292928, 1.303030303030303, 1.3131313131313131, 1.3232323232323233, 1.3333333333333335, 1.3434343434343434, 1.3535353535353536, 1.3636363636363638, 1.3737373737373737, 1.3838383838383839, 1.393939393939394, 1.404040404040404, 1.4141414141414141, 1.4242424242424243, 1.4343434343434343, 1.4444444444444444, 1.4545454545454546, 1.4646464646464648, 1.474747474747475, 1.4848484848484849, 1.494949494949495, 1.5050505050505052, 1.5151515151515151, 1.5252525252525253, 1.5353535353535355, 1.5454545454545454, 1.5555555555555556, 1.5656565656565657, 1.5757575757575757, 1.5858585858585859, 1.595959595959596, 1.606060606060606, 1.6161616161616164, 1.6262626262626263, 1.6363636363636365, 1.6464646464646466, 1.6565656565656566, 1.6666666666666667, 1.676767676767677, 1.6868686868686869, 1.696969696969697, 1.7070707070707072, 1.7171717171717171, 1.7272727272727273, 1.7373737373737375, 1.7474747474747474, 1.7575757575757578, 1.7676767676767677, 1.7777777777777777, 1.787878787878788, 1.797979797979798, 1.8080808080808082, 1.8181818181818183, 1.8282828282828283, 1.8383838383838385, 1.8484848484848486, 1.8585858585858586, 1.8686868686868687, 1.878787878787879, 1.8888888888888888, 1.8989898989898992, 1.9090909090909092, 1.9191919191919191, 1.9292929292929295, 1.9393939393939394, 1.9494949494949496, 1.9595959595959598, 1.9696969696969697, 1.97979797979798, 1.98989898989899, 2.0]
y = [0.6409771086296902, 0.5725983379180033, 0.5125693253023957, 0.460354680444834, 0.4154228836630134, 0.3772487524934553, 0.3453158547025781, 0.3191188333654309, 0.29816561172283934, 0.281979448224173, 0.270100815396911, 0.26208907987568864, 0.2575239649824795, 0.2560067815780244, 0.257161417399228, 0.2606350796520407, 0.26609879013860377, 0.27324763655853795, 0.2818007877405498, 0.2915012843439933, 0.3021156199436484, 0.31343313031087766, 0.32526521108130363, 0.33744438581990494, 0.3498232477420765, 0.36227329902334093, 0.37468371174660164, 0.3869600341244982, 0.39902286473931037, 0.41080651621902475, 0.4222576880796944, 0.4333341664816245, 0.4440035664445341, 0.454242129720087, 0.46403358910300874, 0.47336810754448905, 0.48224129807785016, 0.49065332833300984, 0.4986081113505651, 0.5061125825460234, 0.5131760610472007, 0.5198096922502664, 0.526025967319702, 0.5318383144929031, 0.537260756431673, 0.5423076274740876, 0.5469933444595703, 0.551332224802021, 0.5553383456426452, 0.5590254381968442, 0.5624068117894464, 0.5654953025222145, 0.5683032420116152, 0.5708424421506225, 0.5731241923664162, 0.5751592663501321, 0.5769579357126898, 0.5785299884628251, 0.5798847506035507, 0.5810311094978257, 0.5819775379620977, 0.5827321183083344, 0.5833025657734553, 0.583696250953069, 0.5839202209981637, 0.5839812194433628, 0.5838857046180888, 0.5836398666519365, 0.583249643126943, 0.5827207334560247, 0.5820586120820351, 0.5812685405985173, 0.580355578893693, 0.579324595415527, 0.57818027664931, 0.5769271358913516, 0.5755695213938802, 0.5741116239477594, 0.5725574839615186, 0.5709109980877338, 0.5691759254410916, 0.5673558934465674, 0.5654544033510445, 0.5634748354273194, 0.5614204538957324, 0.5592944115855236, 0.5570997543553856, 0.554839425290465, 0.5525162686912061, 0.5501330338678496, 0.5476923787530669, 0.5451968733440604, 0.5426490029844775, 0.5400511714956236, 0.5374057041657081, 0.5347148506051898, 0.5319807874756973, 0.5292056210994626, 0.5263913899557274, 0.5235400670701454]

def Spline_Cubico(x,y,xp):

	N1 = len(x)
	
	Hx = []
	Hy = []

	A = numpy.zeros((N1,N1))
	B = numpy.zeros(N1)

	for i in range(0,N1-1):
		XX = (x[i+1] - x[i])
		Hx.append(XX)

	for i in range(0,N1-1):
		YY = (y[i+1] - y[i])
		Hy.append(YY)

	# Elementos da Diagonal
	for i in range(N1):
		for j in range(N1):
			if (i == j and i>0):
				A[i][j] = 2*(Hx[i-2] + Hx[i-1])

	A[0][0] = A[N1-1][N1-1] = 1

	# Elementos Superior e Inferior
	for i in range(N1-1):
		for j in range(N1-1):
			if(i == j and i>=1):
				A[i][j-1] = Hx[i-2]
				A[i][j+1] = Hx[i-1]

	# Elemntos do Vetor B
	for i in range(N1-1):
		B[i] = (3/Hx[i])*(y[i+1] - y[i]) - (3/Hx[i-1])*(y[i] - y[i-1])

	B[00] = B[N1-1] = 0

	# Gauss_Sidel Method (Solução do Sistema Linear Associado)
	vec_aprox = numpy.zeros(N1)
	erro = [1]*(N1)
	solution = []
	var_count = 0
	max_int = 100

	while(var_count < max_int):
		for i in range(N1):
			SOMA1 = 0
			for j in range(N1):
				if(i != j):
					SOMA1 = SOMA1 + A[i,j]*vec_aprox[j]
				vec_aprox[i] = (B[i] - SOMA1)/A[i,i]


		for n in range(N1):
			SOMA2 = 0
			for p in range(N1):
				SOMA2 = SOMA2 + A[n,p]*vec_aprox[p]
				erro[n] = abs(SOMA2 - B[n])
				if(numpy.mean(erro) < 0.00001):
					var_count = max_int

		var_count = var_count + 1

	C = vec_aprox

	beta = [0]*(N1-1)
	delta = [0]*(N1-1)


	# Cálculo do Parâmetros das Funções Parciais
	for i in range(N1-1):
		beta[i] = (Hy[i]/Hx[i]) - (Hx[i]/3)*(C[i+1] + 2*C[i])
		delta[i] = (C[i+1] - C[i])/(3*Hx[i])

	# Interpolação para um Ponto xp
	for i in range(N1-1):
		if(xp>=x[i] and xp<=x[i+1]):
			SOMA3 = y[i] + beta[i]*(xp-x[i]) + C[i]*((xp-x[i])**2) + delta[i]*((xp-x[i])**3)

	print("\n O valor da Interpolação no Ponto x = %.3f é  y = %.5f" %(xp,SOMA3))

	# Interpolação para Todos os Pontos
	Intervalo = []
	for i in range(N1-1):
		K = numpy.linspace(x[i],x[i+1],10000)
		for j in range(len(K)):
			SOMA4 = y[i] + beta[i]*(K[j]-x[i]) + C[i]*((K[j]-x[i])**2) + delta[i]*((K[j]-x[i])**3)	
			Intervalo.append(SOMA4)
	
	X = numpy.linspace(x[0],x[-1],len(Intervalo))
	Y = Intervalo
	
	# Plotagem dos Gráficos Observado vs Interpolação
	pyplot.title('Gráfico: Observado vs Interpolação')
	pyplot.xlabel('EIXO X')
	pyplot.ylabel('EIXO Y')
	pyplot.plot(x,y, label = 'Observado', color = 'blue', linestyle = 'solid')
	pyplot.plot(X,Y, label = 'Interpolação', color = 'red', linestyle = 'dashed')
	pyplot.legend()
	pyplot.grid()
	pyplot.show()
